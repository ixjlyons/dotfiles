#!/usr/bin/env python

import subprocess
from subprocess import CalledProcessError

from i3pystatus import IntervalModule

class KeyboardLayout(IntervalModule):
    """
    Shows the current keyboard layout and allows the layout to be changed by
    scrolling.

    Formatters:
        {layout} : the base layout name (usually two-letter code like `us`)
        {variant} : variant of the layout (e.g. `qwertz` vs. `qwerty`)
    """

    interval = 1

    settings = (
        ("format", "Format string used for output."),
        ("layouts", "List of (layout, variant) tuples."),
        ("color", "Standard color."),
    )

    format = "kbd: {layout} [{variant}]"
    layouts = [("us", ""), ("de", "qwerty")]
    color = "#FFFFFF"
    fdict = {}

    on_leftclick = "next_layout"

    def run(self):
        layout, variant = self.layouts[0]

        self.fdict['layout'] = layout
        self.fdict['variant'] = variant

        full_text = self.format.format(**self.fdict)
        self.output = {
            "full_text": full_text,
            "color": self.color,
        }

    def set_layout(self, layouts):
        """
        Uses setxkbmap to set a list of layouts (first in the list is the one
        used).
        """
        llist = ",".join([l[0] for l in layouts])
        vlist = ",".join([l[1] for l in layouts])
        command = ["setxkbmap", "-layout", llist, "-variant", vlist]
        subprocess.check_call(command)

    def next_layout(self):
        pass
        #self.layouts = self.layouts[1:] + self.layouts[:1]
        #self.set_layout(self.layouts)


from i3pystatus import Status

blue = "#386b92"
red = "#962521"

status = Status(standalone=True)

status.register(
    "clock",
    format="%Y-%m-%d [%H:%M]",
    color=blue
)

status.register(
    "alsa",
    increment=1,
    format="vol: {volume}",
    format_muted="vol: x"
)

status.register(
    "disk",
    format="disk: {avail}/{total}",
    path='/',
    critical_limit=10,
    color=red
)

#status.register(
#    "network",
#    interface="enp0s25",
#    format_up="net: {interface} [{v4}]",
#    format_down="net: {interface} [down]",
#    color_up=None,
#    color_down=red
#)

status.register(
    KeyboardLayout(
        layouts = [
            ("us", ""),
            ("de", "qwerty"),
            ("es", "")
        ]
    )
)

status.run()
